shiny::runApp()
shiny::runApp()
install.packages("parcoords")
devtools::install_github("timelyportfolio/parcoords")
runApp()
install.packages("geosphere")
runApp()
runApp()
install.packages("ggthemes")
runApp()
install.packages("formattable")
install.packages("base64enc")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("./f.RData")
filter(f,Provider.State=='AR',averagepay_MDC_hos_per_discharge=="Ear, Nose, Mouth & Throat")
a<-filter(f,Provider.State=='AR',averagepay_MDC_hos_per_discharge=="Ear, Nose, Mouth & Throat")
a[1]
length(a[1])
View(a)
a[1]
a[1,1]
a[1,]
View(a)
rep(NA,42)
runApp()
runApp()
#define functions to give personalized ranking
personal_rank <- function(data,care.vec){
if (data[1,1]=NA) {data[1,]=rep(NA,43)
return(data)}
else {
# weight suggested for 7 criterion
origin.weight <- c(11,11,11,11,2,2,2)
# care weight for 7 criterion
care.weight <- origin.weight*care.vec
# hospital scores for 7 criterion
criterion.score <- as.matrix(data%>%select(Mortality,Safety,Readmission,
Patient.experience,Effectiveness,Timeliness,
Efficient.use.of.medical.image))
criterion.score[is.na(criterion.score)] <- 0
#criterion.score <- as.numeric(c(row[row[32:38]]))
score<-c()
for (i in 1:length(criterion.score[,1])) {
score[i] <- sum(care.weight*criterion.score[i,])
}
data$score<-score
data$rank<-frankv(data,cols = 'score',ties.method = 'dense',order=-1)
data<-data[order(data$score,decreasing = T),]
return(data)
}
}
#define functions to give personalized ranking
personal_rank <- function(data,care.vec){
if (data[1,1]=NA) data[1,]=rep(NA,43)
return(data)
else
# weight suggested for 7 criterion
origin.weight <- c(11,11,11,11,2,2,2)
# care weight for 7 criterion
care.weight <- origin.weight*care.vec
# hospital scores for 7 criterion
criterion.score <- as.matrix(data%>%select(Mortality,Safety,Readmission,
Patient.experience,Effectiveness,Timeliness,
Efficient.use.of.medical.image))
criterion.score[is.na(criterion.score)] <- 0
#criterion.score <- as.numeric(c(row[row[32:38]]))
score<-c()
for (i in 1:length(criterion.score[,1])) {
score[i] <- sum(care.weight*criterion.score[i,])
}
data$score<-score
data$rank<-frankv(data,cols = 'score',ties.method = 'dense',order=-1)
data<-data[order(data$score,decreasing = T),]
return(data)
}
#define functions to give personalized ranking
personal_rank <- function(data,care.vec){
if (data[1,1]=NA) data[1,]<-rep(NA,43)
return(data)
else
# weight suggested for 7 criterion
origin.weight <- c(11,11,11,11,2,2,2)
# care weight for 7 criterion
care.weight <- origin.weight*care.vec
# hospital scores for 7 criterion
criterion.score <- as.matrix(data%>%select(Mortality,Safety,Readmission,
Patient.experience,Effectiveness,Timeliness,
Efficient.use.of.medical.image))
criterion.score[is.na(criterion.score)] <- 0
#criterion.score <- as.numeric(c(row[row[32:38]]))
score<-c()
for (i in 1:length(criterion.score[,1])) {
score[i] <- sum(care.weight*criterion.score[i,])
}
data$score<-score
data$rank<-frankv(data,cols = 'score',ties.method = 'dense',order=-1)
data<-data[order(data$score,decreasing = T),]
return(data)
}
#define functions to give personalized ranking
personal_rank <- function(data,care.vec){
# weight suggested for 7 criterion
origin.weight <- c(11,11,11,11,2,2,2)
# care weight for 7 criterion
care.weight <- origin.weight*care.vec
# hospital scores for 7 criterion
criterion.score <- as.matrix(data%>%select(Mortality,Safety,Readmission,
Patient.experience,Effectiveness,Timeliness,
Efficient.use.of.medical.image))
criterion.score[is.na(criterion.score)] <- 0
#criterion.score <- as.numeric(c(row[row[32:38]]))
score<-c()
for (i in 1:length(criterion.score[,1])) {
score[i] <- sum(care.weight*criterion.score[i,])
}
data$score<-score
data$rank<-frankv(data,cols = 'score',ties.method = 'dense',order=-1)
data<-data[order(data$score,decreasing = T),]
return(data)
}
#define functions to give personalized ranking
personal_rank <- function(data,care.vec){
if (data[1,1]=NA) data[1,]<-rep(NA,43)
else
# weight suggested for 7 criterion
origin.weight <- c(11,11,11,11,2,2,2);
# care weight for 7 criterion
care.weight <- origin.weight*care.vec;
# hospital scores for 7 criterion
criterion.score <- as.matrix(data%>%select(Mortality,Safety,Readmission,
Patient.experience,Effectiveness,Timeliness,
Efficient.use.of.medical.image));
criterion.score[is.na(criterion.score)] <- 0;
#criterion.score <- as.numeric(c(row[row[32:38]]))
score<-c();
for (i in 1:length(criterion.score[,1])) {
score[i] <- sum(care.weight*criterion.score[i,])
};
data$score<-score;
data$rank<-frankv(data,cols = 'score',ties.method = 'dense',order=-1);
data<-data[order(data$score,decreasing = T),];
return(data)
}
View(f)
runApp()
runApp()
load("./f.RData")
d<-f%>%filter(Provider.Id=='AR',averagepay_MDC_hos_per_discharge=='Ear, Nose, Mouth & Throat')
library(tidyverse)
d<-f%>%filter(Provider.Id=='AR',averagepay_MDC_hos_per_discharge=='Ear, Nose, Mouth & Throat')
ifelse(d[1,1]%>%is.na(),k<-rep(NA,43),k<-personal_rank(d,rep(1,7)))
ifelse(d[1,1]%>%is.na(),k<-data.frame(rep(NA,43)),k<-personal_rank(d,rep(1,7)))
if (2>1) 1+1;2+1
d[1,]<-rep(NA,41)
View(d)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
